//------------------------------------------------------------------------------
// top.v generated by "gen_apb_top.sh"
//------------------------------------------------------------------------------
`timescale 1ns/1ns
`ifndef CLK_FREQ
`define CLK_FREQ       50000000
`endif
`ifndef BUS_DELAY
`define BUS_DELAY #(1)
`endif
`ifndef MEM_DELAY
`define MEM_DELAY 0
`endif
`ifndef SIZE_IN_BYTES
`define SIZE_IN_BYTES 1024
`endif

module top;
   //---------------------------------------------------------------------------
   localparam NUM_SLV=2;
   //---------------------------------------------------------------------------
   localparam  P_PSEL0_START=32'h0,P_PSEL0_SIZE=32'h400;
   localparam  P_PSEL1_START=32'h400,P_PSEL1_SIZE=32'h400;
   //---------------------------------------------------------------------------
   localparam CLK_PERIOD_HALF=1_000_000_000/(`CLK_FREQ*2);
   reg         HCLK   = 1'b0; always #(CLK_PERIOD_HALF) HCLK=~HCLK;
   reg         HRESETn= 1'b0; initial #155 HRESETn=1'b1;
   //---------------------------------------------------------------------------
   wire        PCLK   = HCLK;
   wire        PRESETn= HRESETn;
   //---------------------------------------------------------------------------
   wire [31:0]        `BUS_DELAY HADDR ;
   wire [ 3:0]        `BUS_DELAY HPROT ;
   wire               `BUS_DELAY HLOCK ;
   wire [ 1:0]        `BUS_DELAY HTRANS;
   wire               `BUS_DELAY HWRITE;
   wire [ 2:0]        `BUS_DELAY HSIZE ;
   wire [ 2:0]        `BUS_DELAY HBURST;
   wire [31:0]        `BUS_DELAY HWDATA;
   wire [31:0]        `BUS_DELAY HRDATA;
   wire [ 1:0]        `BUS_DELAY HRESP ;
   wire               `BUS_DELAY HREADY;
   //---------------------------------------------------------------------------
   wire               `BUS_DELAY S_PENABLE;
   wire [31:0]        `BUS_DELAY S_PADDR  ;
   wire               `BUS_DELAY S_PWRITE ;
   wire [31:0]        `BUS_DELAY S_PWDATA ;
   wire [31:0]        `BUS_DELAY S_PRDATA [0:NUM_SLV-1];
   wire [NUM_SLV-1:0] `BUS_DELAY S_PSEL   ;
   `ifdef AMBA_APB3
   wire [NUM_SLV-1:0] `BUS_DELAY S_PREADY ;
   wire [NUM_SLV-1:0] `BUS_DELAY S_PSLVERR;
   `endif
   `ifdef AMBA_APB4
   wire [ 2:0]        `BUS_DELAY S_PPROT  ;
   wire [ 3:0]        `BUS_DELAY S_PSTRB  ;
   `endif
   //---------------------------------------------------------------------------
   ahb_to_apb_s2 #(.P_NUM(NUM_SLV) // num of slaves
                  ,.P_PSEL0_START(P_PSEL0_START),.P_PSEL0_SIZE(P_PSEL0_SIZE)
                  ,.P_PSEL1_START(P_PSEL1_START),.P_PSEL1_SIZE(P_PSEL1_SIZE)
                  ,.CLOCK_RATIO   ( 2'b0        ) // 0=1:1, 3=async
                  )
   u_ahb2apb (
        .HRESETn       ( HRESETn    )
      , .HCLK          ( HCLK       )
      , .HSEL          ( HTRANS[1]  )
      , .HADDR         ( HADDR      )
      , .HTRANS        ( HTRANS     )
      , .HSIZE         ( HSIZE      )
      , .HBURST        ( HBURST     )
      , .HPROT         ( HPROT      )
      , .HLOCK         ( HLOCK      )
      , .HWRITE        ( HWRITE     )
      , .HWDATA        ( HWDATA     )
      , .HRDATA        ( HRDATA     )
      , .HRESP         ( HRESP      )
      , .HREADYin      ( HREADY     )
      , .HREADYout     ( HREADY     )
      , .PRESETn       ( PRESETn    )
      , .PCLK          ( PCLK       )
      , .S_PENABLE     ( S_PENABLE  )
      , .S_PADDR       ( S_PADDR    )
      , .S_PWRITE      ( S_PWRITE   )
      , .S_PWDATA      ( S_PWDATA   )
      , .S0_PSEL       ( S_PSEL   [0] )
      , .S0_PRDATA     ( S_PRDATA [0] )
      `ifdef AMBA_APB3
      , .S0_PREADY     ( S_PREADY [0] )
      , .S0_PSLVERR    ( S_PSLVERR[0] )
      `endif
      , .S1_PSEL       ( S_PSEL   [1] )
      , .S1_PRDATA     ( S_PRDATA [1] )
      `ifdef AMBA_APB3
      , .S1_PREADY     ( S_PREADY [1] )
      , .S1_PSLVERR    ( S_PSLVERR[1] )
      `endif
      `ifdef AMBA_APB4
      , .S_PPROT       ( S_PPROT    )
      , .S_PSTRB       ( S_PSTRB    )
      `endif
   );
   //---------------------------------------------------------------------------
   wire done;
   //---------------------------------------------------------------------------
   ahb_tester #(.P_MST_ID(0)
               ,.P_NUM_MST(1)
               ,.P_NUM_SLV(NUM_SLV)
               ,.P_SIZE_IN_BYTES(`SIZE_IN_BYTES))
   u_tester (
         .HRESETn ( HRESETn )
       , .HCLK    ( HCLK    )
       , .HBUSREQ (         )
       , .HGRANT  ( 1'b1    )
       , .HADDR   ( HADDR   )
       , .HPROT   ( HPROT   )
       , .HLOCK   ( HLOCK   )
       , .HTRANS  ( HTRANS  )
       , .HWRITE  ( HWRITE  )
       , .HSIZE   ( HSIZE   )
       , .HBURST  ( HBURST  )
       , .HWDATA  ( HWDATA  )
       , .HRDATA  ( HRDATA  )
       , .HRESP   ( HRESP   )
       , .HREADY  ( HREADY  )
   );
   assign done = u_tester.done;
   //---------------------------------------------------------------------------
   generate
   genvar idy;
   for (idy=0; idy<NUM_SLV; idy=idy+1) begin : BLK_SLV
        mem_apb #(.P_SLV_ID(idy)
                 ,.P_SIZE_IN_BYTES(`SIZE_IN_BYTES)
                 ,.P_DELAY(`MEM_DELAY))
        u_mem_apb (
              .PRESETn   ( PRESETn        )
            , .PCLK      ( PCLK           )
            , .PSEL      ( S_PSEL   [idy] )
            , .PENABLE   ( S_PENABLE      )
            , .PADDR     ( S_PADDR        )
            , .PWRITE    ( S_PWRITE       )
            , .PWDATA    ( S_PWDATA       )
            , .PRDATA    ( S_PRDATA [idy] )
            `ifdef AMBA_APB3
            , .PREADY    ( S_PREADY [idy] )
            , .PSLVERR   ( S_PSLVERR[idy] )
            `endif
            `ifdef AMBA_APB4
            , .PPROT     ( S_PPROT        )
            , .PSTRB     ( S_PSTRB        )
            `endif
        );
   end // for
   endgenerate
   //---------------------------------------------------------------------------
   initial begin
       wait(HRESETn==1'b0);
       wait(HRESETn==1'b1);
       wait(done==1'b1);
       repeat (5) @ (posedge HCLK);
       $finish(2);
   end
   //---------------------------------------------------------------------------
   initial begin
      `ifdef VCD
          // use +define+VCD in 'vlog'
          $dumpfile("wave.vcd");
          $dumpvars(0);
      `else
           // use +VCD in 'vsim'
           if ($test$plusargs("VCD")) begin
               $dumpfile("wave.vcd");
               $dumpvars(5);
           end
      `endif
   end
endmodule
